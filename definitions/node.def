DEF_NAME="node"
DEF_VERSION="v8.11.3"
DEF_FULL_NAME="Node.js ${DEF_VERSION} LTS (VerKnowSys build)"
DEF_SHA="c7bff5100d058117c30b7c3853d3434ae1f764ae"
DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}.tar.gz"
DEF_ORIGIN="http://nodejs.org/download/"
DEF_REQUIREMENTS="pkgconf make gettext c-ares lzo lz4 expat pcre readline perl zip bison libffi openssl python27 nghttp2 icu libuv"
DEF_CONFIGURE_ARGS="--with-dtrace --tag=VerKnowSys \
--shared-openssl --shared-openssl-libpath=${PREFIX} --openssl-use-def-ca-store \
--shared-cares --shared-cares-libpath=${PREFIX} \
--shared-nghttp2 --shared-nghttp2-libpath=${PREFIX} \
--shared-zlib --shared-zlib-libpath=${PREFIX} \
--shared-libuv --shared-libuv-libpath=${PREFIX} \
--without-etw --without-perfctr --without-snapshot \
--with-intl=system-icu --without-inspector \
"
DEF_CONFLICTS_WITH="Node"
DEF_STANDALONE=YES
DEF_USEFUL="bin/npm* bin/node* bin/yar* bin/gyp* bin/pkgconf bin/*conf"
DEF_EXPORTS="node npm npx"
DEF_USELESS="*.a lib/perl* lib/python* include/python x86_64* etc sbin share/systemtap"
DEF_STRIP=LIB

# NOTE: override Sofin compiler setup:
unset DEF_COMPILER_FLAGS DEF_LINKER_FLAGS CFLAGS CXXFLAGS LDFLAGS

CFLAGS="-Wl,-rpath=${PREFIX}/lib,--enable-new-dtags -I${PREFIX}/include -I/usr/include -fPIC -fPIE"
CXXFLAGS="${CFLAGS}"
LDFLAGS="-L${PREFIX}/lib -L/usr/lib"

GYP_DEFINES="clang=1"
CC="cc -w -O2 -fpermissive ${CFLAGS}"
CXX="c++ -w -O2 -fpermissive ${CFLAGS}"
CPP="cpp"
LINK="clang++ -Wl,-rpath=${PREFIX}/lib,--enable-new-dtags ${LDFLAGS}"
LD="${LINK}"

DEF_AFTER_CONFIGURE_METHOD="after_config"
after_config () {
    ${SED_BIN} "s#/usr/local#${PREFIX}#g" deps/v8/src/v8.gyp

    # yes, I know it's wrong ;) but Node is wrong and nobody cares :P
    if [ ! -f "${PREFIX}/lib/libstdc++.so" ]; then
        ${LN_BIN} -s "/usr/lib/libc++.so" "${PREFIX}/lib/libstdc++.so"
    fi
}
DEF_MAKE_METHOD="env CC.host=\"${CC}\" CXX.host=\"${CXX}\" LINK.host=\"${LINK}\" LINK.target=\"${LINK}\" make ${MAKE_OPTS}"
DEF_INSTALL_METHOD="env CC.host=\"${CC}\" CXX.host=\"${CXX}\" LINK.host=\"${LINK}\" LINK.target=\"${LINK}\" make ${MAKE_OPTS} install"

DEF_AFTER_EXPORT_METHOD="after_exports"
after_exports () {
    npm config set registry "http://registry.npmjs.eu/"
    npm config set cafile="${SERVICE_DIR}/etc/ssl/cert.pem"
    npm set prefix="${SERVICE_DIR}"
}

DEF_NO_MPROTECT=YES
DEF_NO_PAGEEXEC=YES
DEF_NO_ASLR=YES
DEF_APPLY_LOWER_SECURITY_ON="${DEF_EXPORTS}"
