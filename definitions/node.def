DEF_NAME="node"
DEF_VERSION="14.16.1"
DEF_SHA="3b8001e12cdae8b0e0fb2c1f7a8eb7f314d30cfc"
DEF_FULL_NAME="Node.js ${DEF_VERSION%.*}-LTS"
DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-v${DEF_VERSION}.tar.xz"
DEF_ORIGIN="https://nodejs.org/dist/latest-v10.x/${DEF_NAME}-v${DEF_VERSION}.tar.xz"
DEF_REQUIREMENTS="jemalloc libedit gettext libxml2 libevent c-ares lzo pcre autoconf texinfo automake18 libffi icu68 yaml nghttp2 libuv openssl"
DEF_CONFIGURE_ARGS="--without-dtrace --with-intl=system-icu --openssl-system-ca-path=${SERVICE_DIR}/etc/ssl --openssl-use-def-ca-store --without-inspector --without-etw --shared-zlib --shared-nghttp2 --shared-cares --shared-openssl --shared-libuv --ninja"
DEF_STANDALONE=YES
DEF_EXPORTS="node npm npx gyp webpack rollup node-sass newman newman-reporter-html postman-combine-collections"
DEF_USEFUL="bin/npm* bin/node* bin/yar* bin/gyp* bin/pkgconf-static bin/*conf"
DEF_USELESS="lib/*.a sbin share/systemtap info share/ac* share/auto* share/*doc share/gettext* lib/cmake lib/pkgconfig lib/*.sh docs"
DEF_CONFLICTS_WITH="Node"

DEF_AFTER_CONFIGURE_METHOD="node_patch_configured"
node_patch_configured () {
    permnote "Replacing: '/usr/local' with: '${PREFIX}', since /usr/local is hardcoded multiple times among Node source files…"
    ${SED_BIN} -i '' \
        -e "s#/usr/local#${PREFIX}#g" \
            "Makefile" \
            "common.gypi" \
            "tools/install.py" \
            "deps/npm/lib/config/defaults.js" \
            "deps/npm/lib/utils/completion.sh"
}

# Override default compiler setup for mr special a.k.a. as the "Node-the-Unicorn" ;)
GYP_DEFINES="clang=1"
BUILD_DEFINES="" # -DDTRACE
CFLAGS="${CFLAGS} ${BUILD_DEFINES}"
CXXFLAGS="${CXXFLAGS} ${BUILD_DEFINES}"
CC="cc ${CFLAGS}"
CXX="c++ ${CXXFLAGS}"
CPP="cpp"
LINK="${CXX} -L${PREFIX}/lib -L/usr/lib ${LDFLAGS} -Wl,-rpath=${PREFIX}/lib,--enable-new-dtags"

# Define Node-specific build environment magic:
DEF_MAKE_METHOD="node_build"
node_build () {
    try "env \
            CC.host=\"${CC}\" \
            CXX.host=\"${CXX}\" \
            LINK.host=\"${CXX}\" \
            LINK.target=\"${CXX}\" \
                gmake ${MAKE_OPTS}" \
                    || error "Failed phase: node_build()"
}

# … and make install needs env magic too:
DEF_INSTALL_METHOD="node_install"
node_install () {
    try "env \
            CC.host=\"${CC}\" \
            CXX.host=\"${CXX}\" \
            LINK.host=\"${CXX}\" \
            LINK.target=\"${CXX}\" \
                gmake install" \
                    || error "Failed phase: node_install()"
}

#
# After exports:
#
#   - Node binary modules "prefix" - default for global npm scripts installation via `npm install -g …`,
#   - NPM "registry" - remote site where NPM should seek for Node modules,
#   - SSL CA certificate - required by Node for TLS/SSL support for Node-driven software..
#
DEF_AFTER_INSTALL_METHOD="fetch_and_install_fresh_ca_cert; node_npm_setup_after_install"
node_npm_setup_after_install () {
    _prefix="${SERVICE_DIR}"
    _registry="https://registry.npmjs.org/"
    _ssl_ca_cert="${SERVICE_DIR}/etc/ssl/cert.pem"
    debug "node_npm_setup_after_install(): $(distn "PREFIX: ${_prefix}"), $(distn "REGISTRY: ${_registry}"), $(distn "SSL_CA_CERT: ${_ssl_ca_cert}")"

    permnote "${DEF_NAME}${DEF_SUFFIX}-${DEF_VERSION}: NPM config-set: $(distn "prefix=${_prefix}")"
    run "npm set prefix=\"${_prefix}\""

    permnote "${DEF_NAME}${DEF_SUFFIX}-${DEF_VERSION}: NPM config-set: $(distn "registry=${_registry}")"
    run "npm config set registry \"${_registry}\""

    permnote "${DEF_NAME}${DEF_SUFFIX}-${DEF_VERSION}: NPM config-set: $(distn "cafile=${_ssl_ca_cert}")"
    run "npm config set cafile=\"${_ssl_ca_cert}\""

    permnote "Installing additional default utilities"
    run "npm install -g webpack"
    run "npm install -g rollup"
    run "npm install -g newman"
    run "npm install -g newman-reporter-html"
    run "npm install -g postman-combine-collections"

    # NOTE: this is why I love Node developers, they're just awesome. I'm big fan:
    _pwd="$(pwd)"
    ${MKDIR_BIN} -p "${SERVICE_DIR}/lib"
    cd "${SERVICE_DIR}/lib"
    run "npm install node-sass" # installing with -g fails, so a workaround:
    ${LN_BIN} -s "${SERVICE_DIR}/lib/node_modules/node-sass/bin/node-sass" "${SERVICE_DIR}/bin/node-sass"
    cd "${_pwd}"
}


fetch_and_install_fresh_ca_cert () {
    mkdir -p "${SERVICE_DIR}/etc/ssl"

    try "${MKDIR_BIN} -p ${SERVICE_DIR}/etc/ssl; ${RM_BIN} -vf ${SERVICE_DIR}/etc/ssl/cert.pem" \
        && note "Removed old CA cert: $(distn "${SERVICE_DIR}/etc/ssl/cert.pem")"

    try "${FETCH_BIN} -o ${SERVICE_DIR}/etc/ssl/cert.pem ${FETCH_OPTS} ${DEF_DEFAULT_CA_CERT_SOURCE}" \
        && note "Fetched most recent CA certs from: $(distn "${DEF_DEFAULT_CA_CERT_SOURCE}")" \
        && return 0

    try "${FETCH_BIN} -o ${SERVICE_DIR}/etc/ssl/cert.pem ${FETCH_OPTS} ${DEF_DEFAULT_CA_CERT_SOURCE_ALT}" \
        && note "Fetched cached CA certs from: $(distn "${DEF_DEFAULT_CA_CERT_SOURCE_ALT}")" \
        && return 0
}


#
# HardenedBSD build-time options and system hardening-features are too much for Node (V8) to handle. Details below:
#
#   Node specific issues:
#       - No "Position Independent Executable" feature is enabled on bbuild-time. Build process is crashing on link with "-pie".
#       - No C++11 standard enabled - recent Node (versions: +10) claim to use C++14, hence C++11 (C++ default) is disabled for Node.
#       - Don't use ccache - Node can be built with ccache enabled, but it makes installation of native NPM modules _much_ more difficult later on…
#
case "${SYSTEM_NAME}-${SYSTEM_VERSION}" in
    FreeBSD-11*)
        unset DEF_USE_LTO
        ;;
esac

DEF_USE_CXX14=YES
DEF_NO_PIE=YES
DEF_NO_CCACHE=YES
DEF_NO_FAST_MATH=YES
DEF_NO_TRAP_INT_OVERFLOW=YES
DEF_NO_FORTIFY_SOURCE=YES
DEF_USE_SAFE_STACK=YES

#
# Some kernel-harden-features have to be disabled explicitly for 'node' since it's built without -fPIE option.
# Since ASLR relies on PIE feature enabled on build time, it is is disabled as well.
# Disabling one of features below will cause V8 to misbehave, be unstable or crash.:
#
DEF_NO_ASLR=YES
DEF_NO_MPROTECT=YES
DEF_NO_PAGEEXEC=YES
DEF_APPLY_LOWER_SECURITY_ON="${DEF_EXPORTS}"
