diff --git OTP_VERSION OTP_VERSION
index 3e6b5caa8..1c6a6689e 100644
--- OTP_VERSION
+++ OTP_VERSION
@@ -1 +1 @@
-19.3.5
+19.3.6
diff --git erts/doc/src/notes.xml erts/doc/src/notes.xml
index 35d7381cf..02b4de404 100644
--- erts/doc/src/notes.xml
+++ erts/doc/src/notes.xml
@@ -32,6 +32,35 @@
   <p>This document describes the changes made to the ERTS application.</p>
 
 
+<section><title>Erts 8.3.5</title>
+
+    <section><title>Fixed Bugs and Malfunctions</title>
+      <list>
+        <item>
+	    <p>Active-mode TCP sockets are now cleaned up properly on
+	    send/shutdown errors.</p>
+          <p>
+	    Own Id: OTP-14441 Aux Id: ERL-430 </p>
+        </item>
+        <item>
+          <p>
+	    A code purge operation could under certain circumstances
+	    expand the size of hibernated processes.</p>
+          <p>
+	    Own Id: OTP-14444 Aux Id: ERIERL-24 </p>
+        </item>
+        <item>
+          <p>
+	    Fix so that the ERL_ZZ_SIGTERM_KILL introduced in
+	    erts-8.3.4 works.</p>
+          <p>
+	    Own Id: OTP-14451</p>
+        </item>
+      </list>
+    </section>
+
+</section>
+
 <section><title>Erts 8.3.4</title>
 
     <section><title>Fixed Bugs and Malfunctions</title>
diff --git erts/emulator/beam/beam_bif_load.c erts/emulator/beam/beam_bif_load.c
index 27d6823d3..b664532c1 100644
--- erts/emulator/beam/beam_bif_load.c
+++ erts/emulator/beam/beam_bif_load.c
@@ -1051,23 +1051,32 @@ erts_proc_copy_literal_area(Process *c_p, int *redsp, int fcalls, int gc_allowed
 
     return am_ok;
 
-literal_gc:
+literal_gc: {
+	int hibernated = !!(c_p->flags & F_HIBERNATED);
+	int gc_cost;
 
-    if (!gc_allowed)
-	return am_need_gc;
+	if (!gc_allowed)
+	    return am_need_gc;
 
-    if (c_p->flags & F_DISABLE_GC)
-	return THE_NON_VALUE;
+	if (c_p->flags & F_DISABLE_GC)
+	    return THE_NON_VALUE;
 
-    FLAGS(c_p) |= F_NEED_FULLSWEEP;
+	FLAGS(c_p) |= F_NEED_FULLSWEEP;
 
-    *redsp += erts_garbage_collect_nobump(c_p, 0, c_p->arg_reg, c_p->arity, fcalls);
+	gc_cost = erts_garbage_collect_nobump(c_p, 0, c_p->arg_reg, c_p->arity, fcalls);
+	*redsp += gc_cost;
 
-    erts_garbage_collect_literals(c_p, (Eterm *) literals, lit_bsize, oh);
+	erts_garbage_collect_literals(c_p, (Eterm *) literals, lit_bsize, oh);
 
-    *redsp += lit_bsize / 64; /* Need, better value... */
+	*redsp += lit_bsize / 64; /* Need, better value... */
 
-    return am_ok;
+	if (hibernated) {
+	    erts_garbage_collect_hibernate(c_p);
+	    *redsp += gc_cost;
+	}
+
+	return am_ok;
+    }
 }
 
 static Eterm
@@ -1154,6 +1163,8 @@ check_process_code(Process* rp, Module* modp, Uint flags, int *redsp, int fcalls
     Eterm* sp;
     int done_gc = 0;
     int need_gc = 0;
+    int hibernated = !!(rp->flags & F_HIBERNATED);
+    int gc_cost = 0;
     ErtsMessage *msgp;
     ErlHeapFragment *hfrag;
 
@@ -1288,8 +1299,13 @@ check_process_code(Process* rp, Module* modp, Uint flags, int *redsp, int fcalls
     while (1) {
 
 	/* Check heap, stack etc... */
-	if (check_mod_funs(rp, &rp->off_heap, mod_start, mod_size))
+	if (check_mod_funs(rp, &rp->off_heap, mod_start, mod_size)) {
+	    if (hibernated) {
+		/* GC wont help; everything on heap is live... */
+		return am_true;
+	    }
 	    goto try_gc;
+	}
 	if (any_heap_ref_ptrs(&rp->fvalue, &rp->fvalue+1, literals, lit_bsize)) {
 	    rp->freason = EXC_NULL;
 	    rp->fvalue = NIL;
@@ -1379,7 +1395,9 @@ check_process_code(Process* rp, Module* modp, Uint flags, int *redsp, int fcalls
 
 	if (need_gc & ERTS_ORDINARY_GC__) {
 	    FLAGS(rp) |= F_NEED_FULLSWEEP;
-	    *redsp += erts_garbage_collect_nobump(rp, 0, rp->arg_reg, rp->arity, fcalls);
+	    gc_cost = erts_garbage_collect_nobump(rp, 0, rp->arg_reg, rp->arity, fcalls);
+	    ASSERT(!hibernated || (need_gc & ERTS_LITERAL_GC__));
+	    *redsp += gc_cost;
 	    done_gc |= ERTS_ORDINARY_GC__;
 	}
 	if (need_gc & ERTS_LITERAL_GC__) {
@@ -1388,6 +1406,10 @@ check_process_code(Process* rp, Module* modp, Uint flags, int *redsp, int fcalls
 	    *redsp += lit_bsize / 64; /* Need, better value... */
 	    erts_garbage_collect_literals(rp, (Eterm*)literals, lit_bsize, oh);
 	    done_gc |= ERTS_LITERAL_GC__;
+	    if (hibernated) {
+		erts_garbage_collect_hibernate(rp);
+		*redsp += gc_cost;
+	    }
 	}
 	need_gc = 0;
     }
diff --git erts/emulator/beam/erl_gc.c erts/emulator/beam/erl_gc.c
index bb36be084..d2560cfb4 100644
--- erts/emulator/beam/erl_gc.c
+++ erts/emulator/beam/erl_gc.c
@@ -764,7 +764,7 @@ do_major_collection:
 	esdp->gc_info.reclaimed += reclaimed_now;
     }
     
-    FLAGS(p) &= ~F_FORCE_GC;
+    FLAGS(p) &= ~(F_FORCE_GC|F_HIBERNATED);
     p->live_hf_end = ERTS_INVALID_HFRAG_PTR;
 
     ERTS_MSACC_POP_STATE_M();
@@ -929,6 +929,8 @@ erts_garbage_collect_hibernate(Process* p)
 
     ErtsGcQuickSanityCheck(p);
 
+    p->flags |= F_HIBERNATED;
+
     erts_smp_atomic32_read_band_nob(&p->state, ~ERTS_PSFLG_GC);
 
     reds = gc_cost(actual_size, actual_size);
@@ -1158,6 +1160,7 @@ erts_garbage_collect_literals(Process* p, Eterm* literals,
     /*
      * Restore status.
      */
+    p->flags &= ~F_HIBERNATED;
     erts_smp_atomic32_read_band_nob(&p->state, ~ERTS_PSFLG_GC);
 }
 
diff --git erts/emulator/beam/erl_process.c erts/emulator/beam/erl_process.c
index 5c0322a7f..54724fd62 100644
--- erts/emulator/beam/erl_process.c
+++ erts/emulator/beam/erl_process.c
@@ -10476,7 +10476,8 @@ execute_sys_tasks(Process *c_p, erts_aint32_t *statep, int in_reds)
 		reds--;
 	    }
 	    else {
-		if (!garbage_collected) {
+		if (!garbage_collected
+		    && !(c_p->flags & F_HIBERNATED)) {
 		    FLAGS(c_p) |= F_NEED_FULLSWEEP;
 		    reds -= scheduler_gc_proc(c_p, reds);
 		    garbage_collected = 1;
diff --git erts/emulator/beam/erl_process.h erts/emulator/beam/erl_process.h
index 68fbb1060..b8755fe94 100644
--- erts/emulator/beam/erl_process.h
+++ erts/emulator/beam/erl_process.h
@@ -1395,6 +1395,7 @@ extern int erts_system_profile_ts_type;
 #define F_HAVE_BLCKD_NMSCHED (1 << 18) /* Process has blocked normal multi-scheduling */
 #define F_HIPE_MODE          (1 << 19)
 #define F_DELAYED_DEL_PROC   (1 << 20) /* Delay delete process (dirty proc exit case) */
+#define F_HIBERNATED         (1 << 21) /* Hibernated */
 
 /*
  * F_DISABLE_GC and F_DELAY_GC are similar. Both will prevent
diff --git erts/emulator/drivers/common/inet_drv.c erts/emulator/drivers/common/inet_drv.c
index 1885338ce..ebd13e6f0 100644
--- erts/emulator/drivers/common/inet_drv.c
+++ erts/emulator/drivers/common/inet_drv.c
@@ -10386,6 +10386,9 @@ static int tcp_send_or_shutdown_error(tcp_descriptor* desc, int err)
 	set_busy_port(desc->inet.port, 0);
     }
 
+    tcp_clear_output(desc);
+    tcp_clear_input(desc);
+
     /*
      * We used to handle "expected errors" differently from unexpected ones.
      * Now we handle all errors in the same way (unless the show_econnreset
@@ -10408,8 +10411,6 @@ static int tcp_send_or_shutdown_error(tcp_descriptor* desc, int err)
 	else
 	    desc_close(INETP(desc));
     } else {
-	tcp_clear_output(desc);
-	tcp_clear_input(desc);
 	tcp_close_check(desc);
 	erl_inet_close(INETP(desc));
 
diff --git erts/emulator/sys/unix/sys.c erts/emulator/sys/unix/sys.c
index de8481b20..7f738751f 100644
--- erts/emulator/sys/unix/sys.c
+++ erts/emulator/sys/unix/sys.c
@@ -838,11 +838,13 @@ void sys_init_suspend_handler(void)
 void
 erts_sys_unix_later_init(void)
 {
-    char env[4];
+    char env[5];
     size_t envsz = sizeof(env);
+
     if (erts_sys_getenv_raw("ERL_ZZ_SIGTERM_KILL", env, &envsz) == 0)
-        if (envsz == 4 && sys_strncmp("true",env,4) == 0)
+        if (envsz == 4 && sys_strncmp("true", env, 4) == 0)
             return;
+
     sys_signal(SIGTERM, request_stop);
 }
 
diff --git erts/emulator/test/code_SUITE.erl erts/emulator/test/code_SUITE.erl
index 3ee14f2d1..1065b56e1 100644
--- erts/emulator/test/code_SUITE.erl
+++ erts/emulator/test/code_SUITE.erl
@@ -645,9 +645,40 @@ constant_pools(Config) when is_list(Config) ->
     erlang:purge_module(literals),
     OldHeap ! done,
     receive
-        {'EXIT',OldHeap,{A,B,C,[1,2,3|_]=Seq}} when length(Seq) =:= 16 ->
-            ok
-    end.
+	{'EXIT',OldHeap,{A,B,C,[1,2,3|_]=Seq}} when length(Seq) =:= 16 ->
+	    ok
+    end,
+
+    {module,literals} = erlang:load_module(literals, Code),
+    %% Have a hibernated process that references the literals
+    %% in the 'literals' module.
+    {Hib, Mon} = spawn_monitor(fun() -> hibernated(Self) end),
+    receive go -> ok end,
+    [{heap_size,OldHeapSz},
+     {total_heap_size,OldTotHeapSz}] = process_info(Hib, [heap_size,
+							  total_heap_size]),
+    OldHeapSz = OldTotHeapSz,
+    io:format("OldHeapSz=~p OldTotHeapSz=~p~n", [OldHeapSz, OldTotHeapSz]),
+    true = erlang:delete_module(literals),
+    false = erlang:check_process_code(Hib, literals),
+    erlang:check_process_code(self(), literals),
+    erlang:purge_module(literals),
+    receive after 1000 -> ok end,
+    [{heap_size,HeapSz},
+     {total_heap_size,TotHeapSz}] = process_info(Hib, [heap_size,
+						       total_heap_size]),
+    io:format("HeapSz=~p TotHeapSz=~p~n", [HeapSz, TotHeapSz]),
+    Hib ! hej,
+    receive
+	{'DOWN', Mon, process, Hib, Reason} ->
+	    {undef, [{no_module,
+		      no_function,
+		      [{A,B,C,[1,2,3|_]=Seq}], _}]} = Reason,
+	    16 = length(Seq)
+    end,
+    HeapSz = TotHeapSz, %% Ensure restored to hibernated state...
+    true = HeapSz > OldHeapSz,
+    ok.
 
 no_old_heap(Parent) ->
     A = literals:a(),
@@ -670,6 +701,13 @@ old_heap(Parent) ->
             exit(Res)
     end.
 
+hibernated(Parent) ->
+    A = literals:a(),
+    B = literals:b(),
+    Res = {A,B,literals:huge_bignum(),lists:seq(1, 16)},
+    Parent ! go,
+    erlang:hibernate(no_module, no_function, [Res]).
+
 create_old_heap() ->
     case process_info(self(), [heap_size,total_heap_size]) of
         [{heap_size,Sz},{total_heap_size,Total}] when Sz < Total ->
diff --git erts/vsn.mk erts/vsn.mk
index dc17ed8b3..acc50dc18 100644
--- erts/vsn.mk
+++ erts/vsn.mk
@@ -18,7 +18,7 @@
 # %CopyrightEnd%
 # 
 
-VSN = 8.3.4
+VSN = 8.3.5
 
 # Port number 4365 in 4.2
 # Port number 4366 in 4.3
diff --git otp_versions.table otp_versions.table
index 0d2f7491d..73f6db55e 100644
--- otp_versions.table
+++ otp_versions.table
@@ -1,3 +1,4 @@
+OTP-19.3.6 : erts-8.3.5 # asn1-4.0.4 common_test-1.14 compiler-7.0.4 cosEvent-2.2.1 cosEventDomain-1.2.1 cosFileTransfer-1.2.1 cosNotification-1.2.2 cosProperty-1.2.1 cosTime-1.2.2 cosTransactions-1.3.2 crypto-3.7.4 debugger-4.2.1 dialyzer-3.1.1 diameter-1.12.2 edoc-0.8.1 eldap-1.2.2 erl_docgen-0.6.1 erl_interface-3.9.3 et-1.6 eunit-2.3.2 gs-1.6.2 hipe-3.15.4 ic-4.4.2 inets-6.3.9 jinterface-1.7.1 kernel-5.2 megaco-3.18.1 mnesia-4.14.3 observer-2.3.1 odbc-2.12 orber-3.8.2 os_mon-2.4.2 otp_mibs-1.1.1 parsetools-2.1.4 percept-0.9 public_key-1.4 reltool-0.7.3 runtime_tools-1.11.1 sasl-3.0.3 snmp-5.2.5 ssh-4.4.2 ssl-8.1.3 stdlib-3.3 syntax_tools-2.1.1 tools-2.9.1 typer-0.9.12 wx-1.8 xmerl-1.3.14 :
 OTP-19.3.5 : erts-8.3.4 xmerl-1.3.14 # asn1-4.0.4 common_test-1.14 compiler-7.0.4 cosEvent-2.2.1 cosEventDomain-1.2.1 cosFileTransfer-1.2.1 cosNotification-1.2.2 cosProperty-1.2.1 cosTime-1.2.2 cosTransactions-1.3.2 crypto-3.7.4 debugger-4.2.1 dialyzer-3.1.1 diameter-1.12.2 edoc-0.8.1 eldap-1.2.2 erl_docgen-0.6.1 erl_interface-3.9.3 et-1.6 eunit-2.3.2 gs-1.6.2 hipe-3.15.4 ic-4.4.2 inets-6.3.9 jinterface-1.7.1 kernel-5.2 megaco-3.18.1 mnesia-4.14.3 observer-2.3.1 odbc-2.12 orber-3.8.2 os_mon-2.4.2 otp_mibs-1.1.1 parsetools-2.1.4 percept-0.9 public_key-1.4 reltool-0.7.3 runtime_tools-1.11.1 sasl-3.0.3 snmp-5.2.5 ssh-4.4.2 ssl-8.1.3 stdlib-3.3 syntax_tools-2.1.1 tools-2.9.1 typer-0.9.12 wx-1.8 :
 OTP-19.3.4 : inets-6.3.9 ssl-8.1.3 # asn1-4.0.4 common_test-1.14 compiler-7.0.4 cosEvent-2.2.1 cosEventDomain-1.2.1 cosFileTransfer-1.2.1 cosNotification-1.2.2 cosProperty-1.2.1 cosTime-1.2.2 cosTransactions-1.3.2 crypto-3.7.4 debugger-4.2.1 dialyzer-3.1.1 diameter-1.12.2 edoc-0.8.1 eldap-1.2.2 erl_docgen-0.6.1 erl_interface-3.9.3 erts-8.3.3 et-1.6 eunit-2.3.2 gs-1.6.2 hipe-3.15.4 ic-4.4.2 jinterface-1.7.1 kernel-5.2 megaco-3.18.1 mnesia-4.14.3 observer-2.3.1 odbc-2.12 orber-3.8.2 os_mon-2.4.2 otp_mibs-1.1.1 parsetools-2.1.4 percept-0.9 public_key-1.4 reltool-0.7.3 runtime_tools-1.11.1 sasl-3.0.3 snmp-5.2.5 ssh-4.4.2 stdlib-3.3 syntax_tools-2.1.1 tools-2.9.1 typer-0.9.12 wx-1.8 xmerl-1.3.13 :
 OTP-19.3.3 : dialyzer-3.1.1 erts-8.3.3 inets-6.3.8 # asn1-4.0.4 common_test-1.14 compiler-7.0.4 cosEvent-2.2.1 cosEventDomain-1.2.1 cosFileTransfer-1.2.1 cosNotification-1.2.2 cosProperty-1.2.1 cosTime-1.2.2 cosTransactions-1.3.2 crypto-3.7.4 debugger-4.2.1 diameter-1.12.2 edoc-0.8.1 eldap-1.2.2 erl_docgen-0.6.1 erl_interface-3.9.3 et-1.6 eunit-2.3.2 gs-1.6.2 hipe-3.15.4 ic-4.4.2 jinterface-1.7.1 kernel-5.2 megaco-3.18.1 mnesia-4.14.3 observer-2.3.1 odbc-2.12 orber-3.8.2 os_mon-2.4.2 otp_mibs-1.1.1 parsetools-2.1.4 percept-0.9 public_key-1.4 reltool-0.7.3 runtime_tools-1.11.1 sasl-3.0.3 snmp-5.2.5 ssh-4.4.2 ssl-8.1.2 stdlib-3.3 syntax_tools-2.1.1 tools-2.9.1 typer-0.9.12 wx-1.8 xmerl-1.3.13 :
