DEF_DISABLE_ON="Linux"
DEF_FULL_NAME="Low Level Virtual Machine bundle (provided with shared build of Clang)"
DEF_SHA="0689345d73911e24a07b24cc82dab4fb46b8c323"
DEF_NAME="llvm"
DEF_VERSION="8.0.0"
DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}.src.tar.xz"
DEF_REQUIREMENTS="libedit db pcre expat yaml libffi libressl python27 ninja swig libunwind"
DEF_CONFIGURE_ARGS="-DLLVM_ENABLE_CXX1Y=on -DLLVM_INCLUDE_EXAMPLES=off -DLLVM_INCLUDE_TESTS=off -DLLVM_ENABLE_RTTI=on -DLLVM_ENABLE_PIC=on -DLLVM_TARGETS_TO_BUILD=\"X86;ARM\" -DLLVM_TARGET_ARCH=x86_64 -DLLVM_BUILD_32_BITS=off -DLLVM_INSTALL_UTILS=on -DLLVM_OPTIMIZED_TABLEGEN=on -DLLVM_ENABLE_ASSERTIONS=off -DLLVM_USE_FOLDERS=off -DLLVM_BUILD_DOCS=off -DLLVM_INCLUDE_DOCS=off -DLLVM_INCLUDE_GO_TESTS=off -DLLVM_PARALLEL_LINK_JOBS=${CPUS} -DLLVM_PARALLEL_COMPILE_JOBS=${CPUS} -DLLVM_ENABLE_LIBCXX=on -DLLVM_TOOL_COMPILER_RT_BUILD=on -DLLVM_APPEND_VC_REV=off -DLLVM_TOOL_LIBCXX_BUILD=on -DLLVM_TOOL_LIBCXXABI_BUILD=on -DLLVM_BUILD_LLVM_DYLIB=on"
DEF_LINKER_FLAGS="-fPIC"
DEF_CONFIGURE_METHOD="cmake"
DEF_EXPORTS="FileCheck not lli-child-target bugpoint c-index-test clang clang++ clang-cl clang-cpp clang-tblgen clang-check clang-format clang-import-test clang-offload-bundler clang-rename idle llc lli llvm-ar llvm-as llvm-bcanalyzer llvm-config llvm-cov llvm-diff llvm-dis llvm-dwarfdump llvm-extract llvm-ld llvm-lto llvm-link llvm-mc llvm-nm llvm-objdump llvm-prof llvm-ranlib llvm-readobj llvm-rtdyld llvm-size llvm-stress llvm-stub llvm-tblgen macho-dump opt llvm-symbolizer llvm-split llvm-profdata llvm-PerfectShuffle llvm-pdbdump llvm-mcmarkup llvm-lib llvm-dwp llvm-dsymutil llvm-cxxdump llvm-c-test yaml-bench"
DEF_USEFUL="bin/llvm* bin/clang* bin/*conf"
DEF_USELESS="lib/perl* include/python* lib/python* share man doc"
unset DEF_USE_LTO

case "${SYSTEM_NAME}" in
    Darwin)
        DEF_CONFIGURE_ARGS="${DEF_CONFIGURE_ARGS} -DLLVM_ENABLE_LTO=on"
        ;;
esac

DEF_AFTER_UNPACK_METHOD="unpack_tools"
unpack_tools () {
    cd tools
    # NOTE: Clang is in "cfe" archive:
    try "${FETCH_BIN} -O '${MAIN_SOURCE_REPOSITORY}cfe-${DEF_VERSION}.src.tar.xz'" \
        && try "${TAR_BIN} xf 'cfe-${DEF_VERSION}.src.tar.xz'" \
        && try "${MV_BIN} 'cfe-${DEF_VERSION}.src' clang" \
        && cd .. \
        && return 0
    return 1
}

# Cmake build can.. skip FileCheck installation, just because
DEF_AFTER_INSTALL_METHOD="fix_cmake_mess"
fix_cmake_mess () {
    try "${INSTALL_BIN} -v bin/FileCheck ${PREFIX}/bin/FileCheck"
}
