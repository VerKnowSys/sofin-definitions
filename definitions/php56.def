APP_FULL_NAME="PHP"
APP_SHA="bc9ff4e94072f4a17f3ead9a207194f57343919b"
APP_NAME="php"
APP_VERSION="5.6.19"
APP_POSTFIX="56"
APP_HTTP_PATH="${MAIN_SOURCE_REPOSITORY}${APP_NAME}-${APP_VERSION}.tar.xz"
APP_CONFIGURE_ARGS="--disable-all --with-libdir=${PREFIX}/lib --with-layout=PHP --with-libxml-dir=${PREFIX} --with-pcre-dir=${PREFIX} --with-zlib-dir=${PREFIX} --with-gettext=${PREFIX} --with-gd --with-png-dir=${PREFIX} --with-jpeg-dir=${PREFIX} --enable-exif --enable-zip --enable-mysqlnd --without-apache --disable-debug --enable-fpm --enable-sockets --enable-soap --enable-json --enable-xml --enable-libxml --enable-dom --enable-cli --enable-session --enable-hash --enable-simplexml --enable-filter --enable-pdo --with-pdo-mysql=${PREFIX} --with-pdo-pgsql=${PREFIX} --enable-mbstring --enable-fileinfo --with-openssl --enable-intl --with-mcrypt=${PREFIX} --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-openssl-dir=${PREFIX} --with-pgsql=${PREFIX} --with-curl=${PREFIX} --with-gmp=${PREFIX} --with-freetype-dir=${PREFIX} --with-pear --with-xsl=${PREFIX} --enable-posix --with-bz2 --enable-ftp --enable-calendar --enable-bcmath --enable-wddx --enable-zip --enable-intl --with-mssql=${PREFIX} --with-xmlrpc --with-kerberos --with-iconv --disable-maintainer-zts --enable-cgi --disable-roxen-zts --enable-ctype --with-mhash=${PREFIX} --enable-tokenizer --enable-xmlwriter --enable-xmlreader --enable-sqlite-utf8 --with-sqlite=${PREFIX} --with-pdo-sqlite=${PREFIX} --with-sqlite3=${PREFIX} --with-ldap=${PREFIX} --with-ldap-sasl=${PREFIX} --with-imap-ssl=${PREFIX} --with-imap=${PREFIX} --with-litespeed --enable-fastcgi --enable-cgi --enable-opcache --enable-phar"
APP_REQUIREMENTS="gmake perl libiconv pkgconf zlib nasm lzma lzo db libpng jpeg libressl cclient gettext bzip2 m4 gmp51 autoconf bison27 flex readline postgresql94 python27 libxml2 libtool icu libgpg-error libgcrypt libxslt pcre libexif freetype expat fontconfig tiff jasper jbig2dec jbigkit libjpeg-turbo gd cmake ncurses mysql libmcrypt texinfo libidn curl imagemagick freetds sqlite2 sqlite cyrus-sasl openldap geoip libnet krb re2c"
APP_INSTALL_METHOD="gmake install -s"
APP_BUNDLED_EXTENSIONS="phalcon2 phalcon xdebug imagick rar geoip dbase"
APP_EXPORTS="php php-cgi php-fpm php-config phpize pecl pear lsphp"
APP_USELESS="doc docs lib/perl* mysql-test scripts sql-bench support-files data Software man bin/DB lib/libperl.so share/*.sql share/man share/cmake* lib/python* include/python* lib/libxslt-plugins lib/libmcrypt lib/cmake lib/*.sh share/bison share/autoconf COPYING INSTALL-BINARY README"
if [ "${SYSTEM_NAME}" = "Linux" ]; then
    APP_BUNDLED_EXTENSIONS="oci8 ${APP_BUNDLED_EXTENSIONS}"
    # Under Linux, we don't need these libs after oci extension is built, cause
    # we use ld cache to specify system wide place for Oracle libs.
    # We remove those cause they add redundant 160+MiB to bundle size:
    APP_USELESS="${APP_USELESS} lib/libociei.so lib/libclntsh* lib/libocci.so.* lib/libnnz*.so lib/libocijdbc*.so lib/liboramysql*.so lib/libipc*.so lib/libmql*.so lib/libons.so lib/liboramysql*.so"
fi

case "${SYSTEM_NAME}" in
    Linux)
        export APP_CONFIGURE_ARGS="${APP_CONFIGURE_ARGS} --with-config-file-path=${PREFIX}"
        ;;

    FreeBSD)
        export APP_CONFIGURE_ARGS="${APP_CONFIGURE_ARGS} --with-config-file-path=${SERVICE_DIR}/etc"
        ;;
esac

install_oci8_libs () {
    if [ "${SYSTEM_NAME}" = "FreeBSD" ]; then
        warn "OCI8 not supported under FreeBSD hosts!" && \
        return 0
    fi
    ${FETCH_BIN} "${MAIN_SOURCE_REPOSITORY}oci8-12.1.tar.xz" && \
    ${TAR_BIN} xf oci8-12.1.tar.xz && \
    ${CP_BIN} oci8/*.h ${PREFIX}/include/ && \
    ${MV_BIN} oci8/*.h ${PREFIX}/lib/ && \
    ${MV_BIN} oci8/*.so* ${PREFIX}/lib/ && \
    note "OCI8 libraries installed"
}

hack_after_unpack () {
    ${RM_BIN} -f /root/.pearrc

    # HACK: Required to detect freetds (don't blame me, but Php/TDS guys for messed up library detection)
    ${MKDIR_BIN} -p ${PREFIX}/Software
    ${LN_BIN} -s ${PREFIX} ${PREFIX}/Software || true
}

APP_AFTER_UNPACK_CALLBACK="install_oci8_libs ; hack_after_unpack"
APP_AFTER_CONFIGURE_CALLBACK="${RM_BIN} -rf ${PREFIX}/Software || true"

# install extensions
APP_AFTER_INSTALL_CALLBACK="install_extensions ; cleanup_oci8_headers"
cleanup_oci8_headers () {
    ${RM_BIN} -f ${PREFIX}/lib/*.h
}

install_geoip () {
    geoip_name="geoip-1.0.8"
    geoip_archive="${geoip_name}.tgz"
    ${FETCH_BIN} "${MAIN_SOURCE_REPOSITORY}${geoip_archive}" && \
    ${TAR_BIN} xf ${geoip_archive} && \
    cd ${geoip_name} && \
    ${PREFIX}/bin/phpize && \
    ./configure --prefix=${PREFIX} --with-php-config=${PREFIX}/bin/php-config --with-geoip=${PREFIX} && \
    PATH=${PREFIX}/bin:$PATH make install && \
    note "Installed PECL extension: ${geoip_name}" && \
    return 0
    return 1
}

install_imagick () {
    PATH=$PATH:${PREFIX}/bin echo ${PREFIX} | ${PREFIX}/bin/pecl install imagick
}

install_rar () {
    PATH=$PATH:${PREFIX}/bin echo ${PREFIX} | ${PREFIX}/bin/pecl install rar
}

install_phalcon_common () {
    p_version="${1}"
    current_builddir="$(${PWD_BIN} 2>/dev/null)"
    export PATH=${PREFIX}/bin:/bin:/usr/bin:/sbin:/usr/sbin && \
    ${GIT_BIN} clone --depth=1 git://github.com/phalcon/cphalcon.git cph${p_version} && \
    cd cph${p_version} && \
    ${GIT_BIN} checkout -b "v${p_version}" && \
    cd build
    ${SED_BIN} -i '' -e "s/32bits/64bits/g; s#--enable-phalcon#--enable-phalcon --enable-shared --disable-static --with-php-config=${PREFIX}/bin/php-config#g; s#gcc #cc #g; s#\"gcc\"#\"cc\"#g;
    s#export CFLAGS=\"#export CFLAGS=\"-I${PREFIX}/include -fPIC -mno-avx -fvisibility=hidden #" ./install
    PATH=$PATH /bin/sh ./install && \
    note "Installed PECL: phalcon" && \
    cd "${current_builddir}" && \
    return 0
    return 1
}

install_phalcon () {
    install_phalcon_common "1.3.6"
}

install_phalcon2 () {
    current_builddir="$(${PWD_BIN} 2>/dev/null)"
    install_phalcon_common "2.0.0" && \
    cd ${PREFIX}/lib/php/extensions/no-debug-non-zts-* && \
    ${MV_BIN} phalcon.so phalcon2.so && \
    cd "${current_builddir}"
}

install_pear_modules () {
    for mod in Archive_Tar Auth Auth_HTTP Auth_SASL Benchmark Cache Cache_Lite Config Date DB DB_DataObject DB_DataObject_FormBuilder File HTML_Common HTML_Form HTML_QuickForm HTML_QuickForm_Controller HTML_Table HTML_Template_Flexy HTML_Template_IT HTML_Template_Sigma HTML_TreeMenu HTTP HTTP_Client HTTP_Download HTTP_Header HTTP_Request HTTP_Upload Image_Canvas Image_Color Image_Graph Log Mail Mail_Mime Mail_mimeDecode MDB MDB2 MDB2_Driver_mysql MIME_Type Net_DNS Net_FTP Net_IMAP Net_IPv4 Net_IPv6 Net_Ping Net_POP3 Net_SMTP Net_Socket Net_URL2 Net_URL Net_UserAgent_Detect Numbers_Roman Numbers_Words OLE Pager PHP_Compat PhpDocumentor PHPUnit Services_Weather SOAP Spreadsheet_Excel_Writer Structures_Graph Text_Password Validate XML_Beautifier XML_Parser XML_RPC XML_Serializer XML_Tree XML_Util mdb OLE-beta Spreadsheet_Excel_Writer-beta Crypt_CHAP Numbers_Words-beta File_Passwd HTTP_WebDAV_Server xml_rpc2;
    do
        ${PREFIX}/bin/pear install $mod
    done
}

install_dbase () {
    PATH=${PREFIX}/bin:$PATH ${PREFIX}/bin/pecl install dbase
}


install_xdebug () {
    PATH=${PREFIX}/bin:$PATH ${PREFIX}/bin/pecl install xdebug
}


install_oci8 () {
    if [ "${SYSTEM_NAME}" = "FreeBSD" ]; then
        warn "OCI8 not supported under FreeBSD hosts!" && \
        return 0
    fi
    arch_name="oci8-2.0.10"
    archive="${arch_name}.tgz"
    ${FETCH_BIN} "${MAIN_SOURCE_REPOSITORY}${archive}" && \
    ${TAR_BIN} xf "${archive}" && \
    cd "${arch_name}" && \
    ${PREFIX}/bin/phpize && \
    ./configure --prefix=${PREFIX} --with-php-config=${PREFIX}/bin/php-config --with-oci8=instantclient,${PREFIX}/lib && \
    PATH=${PREFIX}/bin:$PATH make install && \
    note "Installed PECL extension: ${arch_name}" && \
    return 0
    return 1
}


install_and_move () {
    name="$1"
    install_${name} && \
    ${CP_BIN} -v ${PREFIX}/lib/php/extensions/no-debug*/${name}* ${PREFIX}/lib/php/extensions/ && \
    ${RM_BIN} -f ${PREFIX}/lib/php/extensions/no-debug*/${name}* && \
    return 0
    return 1
}


install_extensions () {
    # update pecl protocols before installing extensions
    PATH=${PREFIX}/bin:$PATH ${PREFIX}/bin/pecl channel-update pecl.php.net
    extensions_dir="${PREFIX}/lib/php/extensions"
    for name in ${APP_BUNDLED_EXTENSIONS}; do
        test -f "${extensions_dir}/${name}.so" || install_and_move "${name}" || error "Failed to install PECL extension: ${name}"
    done
    name="opcache"
    ${CP_BIN} -v ${PREFIX}/lib/php/extensions/no-debug*/${name}* ${PREFIX}/lib/php/extensions/ && \
    ${RM_BIN} -f ${PREFIX}/lib/php/extensions/no-debug*/${name}* || \
    note "No opcache PECL extension moved"
    install_pear_modules
}

# Used by Php 5.2-5.4:
install_opcache () {
    PATH=$PATH:${PREFIX}/bin echo ${PREFIX} | ${PREFIX}/bin/pecl install zendopcache
}

# Used by Php 5.2-5.4:
install_apc () {
    printf "no\nno\nno\nno\nno\nyes\n" | PATH=${PREFIX}/bin:$PATH ${PREFIX}/bin/pecl install apc
}

# Used by Php 5.2-5.3:
install_phar () {
    PATH=${PREFIX}/bin:$PATH ${PREFIX}/bin/pecl install phar
}
