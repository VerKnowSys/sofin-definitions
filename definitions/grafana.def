DEF_STANDALONE=YES
DEF_FULL_NAME="Grafana"
DEF_NAME="grafana"
DEF_VERSION="6.3.6"
DEF_SOURCE_PATH="https://github.com/grafana/grafana.git"
DEF_GIT_CHECKOUT="master"
DEF_REQUIREMENTS="go"
DEF_CONFIGURE_METHOD="ignore"
DEF_EXPORTS="grafana-cli grafana-server"
DEF_NO_CCACHE=YES

DEF_MAKE_METHOD="make_action"
make_action () {
    mkdir -p "${PREFIX}/bin"
    export PATH=${PATH}:/Software/Git/bin
    export GOPATH="$(pwd)"

    debug "Checking out v${DEF_VERSION}" && \
    ${GIT_BIN} checkout -b "v${DEF_VERSION}"

    debug "Fetching last version of xerrors (to prevent fail with Go 1.13)" && \
    go get -u golang.org/x/xerrors && \
    debug "Building server" && \
    go build -ldflags "-w" -o "${PREFIX}/bin/grafana-server" ./pkg/cmd/grafana-server && \
    debug "Building cli" && \
    go build -ldflags "-w" -o "${PREFIX}/bin/grafana-cli" ./pkg/cmd/grafana-cli
    # NOTE: setting "-X main.version=${DEF_VERSION} -X main.commit=v${DEF_VERSION}" causes: "flag provided but not defined: -X"

    cd "${GOPATH}"
    debug "Fetching prebuilt Grafana archive" && \
    ${FETCH_BIN} -o "${DEF_NAME}-${DEF_VERSION}.linux-amd64.tar.gz" "${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}.linux-amd64.tar.gz" && \
    ${TAR_BIN} xf "${DEF_NAME}-${DEF_VERSION}.linux-amd64.tar.gz" && \
    cd ${DEF_NAME}-${DEF_VERSION} && \
    ${CP_BIN} -R public/ "${SERVICE_DIR}/public" && \
    ${CP_BIN} -R conf/ "${SERVICE_DIR}/conf" && \
    cd .. && \
    note "Done."
}

DEF_INSTALL_METHOD="strip_wipe_and_link_stuff"
strip_wipe_and_link_stuff () {
    for binary in $(to_iter "${DEF_EXPORTS}"); do
        ${STRIP_BIN} "${PREFIX}/bin/${binary}"
    done
    if [ ! -L "${PREFIX}/conf" ]; then
        ${LN_BIN} -fs "${SERVICE_DIR}/conf" "${PREFIX}/conf"
    fi
    if [ ! -L "${PREFIX}/public" ]; then
        ${LN_BIN} -fs "${SERVICE_DIR}/public" "${PREFIX}/public"
    fi
    if [ -n "${PREFIX}" ]; then
        ${RM_BIN} -rf \
            "${PREFIX}/api" \
            "${PREFIX}/lib" \
            "${PREFIX}/man" \
            "${PREFIX}/misc" \
            "${PREFIX}/src" \
            "${PREFIX}/pkg" \
            "${PREFIX}/test" \
            "${SERVICE_DIR}/pkg"
    fi
}
