DEF_FULL_NAME="Grafana"
DEF_NAME="grafana"
DEF_VERSION="2.6.0"
DEF_SOURCE_PATH="git://github.com/OliverLetterer/dummy-repo.git"
DEF_GIT_MODE=YES
DEF_GIT_CHECKOUT="v${DEF_VERSION}"
DEF_REQUIREMENTS="pkgconf pcre go15 zlib bzip2 make yaml libedit python27 node42"
DEF_CONFIGURE="ignore"
DEF_USELESS="etc doc test include share src local/src misc pkg api man lib/python* AUTHORS CONTRIBUTING.md CONTRIBUTORS LICENSE PATENTS README.md VERSION favicon.ico robots.txt"
DEF_EXPORTS="grafana-cli grafana-server"
DEF_NO_CCACHE=YES

DEF_MAKE_METHOD="make_action"
make_action () {
    # XXX: hardcoded path to git:
    export PATH=${PATH}:/Software/Git/exports
    export GOPATH=${PREFIX}/local
    debug "Cleaning GOPATH: ${GOPATH} & ${PREFIX}/grafana-github"
    ${RM_BIN} -rf "${GOPATH}" "${PREFIX}/grafana-github"
    ${MKDIR_BIN} -p "${GOPATH}"
    cd "${GOPATH}"
    debug "Fetching Grafana"
    ${PREFIX}/bin/go get github.com/grafana/grafana
    cd "${GOPATH}/src/github.com/grafana/grafana"

    debug "Checking out v${DEF_VERSION}" && \
    ${GIT_BIN} checkout -b "v${DEF_VERSION}" && \
    debug "Fetching dependencies of Grafana" && \
    ${PREFIX}/bin/go run build.go setup && \
    ${GOPATH}/bin/godep restore && \
    debug "Building Grafana" && \
    ${PREFIX}/bin/go clean ./... && \
    debug "Installing ${DEF_NAME}" && \
    ${PREFIX}/bin/go install ./... && \
    debug "Installing node modules" && \
    cd ${PREFIX} && \
    ${GIT_BIN} clone https://github.com/grafana/grafana.git grafana-github && \
    cd grafana-github && \
    ${GIT_BIN} checkout -b "v${DEF_VERSION}" && \
    ${PREFIX}/bin/npm install && \
    ${PREFIX}/bin/npm install -g grunt-cli && \
    ${PREFIX}/bin/grunt && \
    ${CP_BIN} -R public/ ../public && \
    ${CP_BIN} -R conf/ ../conf && \
    cd .. && \
    ${RM_BIN} -rf ./grafana-github && \
    note "Done."
}

DEF_INSTALL_METHOD="install_links"
install_links () {
    for binary in grafana-cli grafana-server; do
        ${RM_BIN} -f ${PREFIX}/bin/${binary}
        ${STRIP_BIN} ${PREFIX}/local/bin/${binary}
        ${LN_BIN} -s ${PREFIX}/local/bin/${binary} ${PREFIX}/bin/${binary}
    done
}
