DEF_DISABLE_ON="Linux Darwin"
DEF_FULL_NAME="Rust + Cargo + Utilities"
DEF_NAME="rust"
DEF_VERSION="1.76.0"

case "${SYSTEM_ARCH}" in
    arm64|aarch64)
        DEF_SHA="a57291cf0bfd95b9d0de58127ad4add30b6a4c38"
        DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}.pkg.tar.xz" # rust-1.76.0.pkg is taken from aarch64 ports build, file name was suffixed with tar.xz

        _cargo_crates="rustfmt exa hexyl ripgrep fd-find cargo-asm cargo-audit cargo-do cargo-check cargo-edit" # evcxr_repl rdb tac lw wasm-pack

        DEF_TYPE="meta"
        DEF_REQUIREMENTS="@curl-openssl"
        DEF_AFTER_INSTALL_METHOD="patch_prefix_and_install_arm64 && create_cargo_bin_wrapper && install_utils"
        ;;

    amd64|x86_64)
        DEF_SHA="e96faa39b3db49a5e7d4a33c8d5839e4075d7c29"
        DEF_ORIGIN="https://static.rust-lang.org/dist/rust-${DEF_VERSION}-x86_64-unknown-freebsd.tar.gz" # https://forge.rust-lang.org/infra/other-installation-methods.html#standalone
        DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}-x86_64-unknown-freebsd.tar.gz"

        _cargo_crates="rustfmt exa hexyl rdb tac ripgrep fd-find cargo-asm cargo-audit cargo-do cargo-check cargo-edit wasm-pack evcxr_repl" # lw

        DEF_AFTER_UNPACK_METHOD="patch_prefix_and_install_x86_64 && install_wasm_compiler"
        ;;
esac

DEF_STANDALONE=YES
DEF_CONFIGURE_METHOD="binary"
DEF_USE_SAFE_STACK=YES
DEF_CLEAN_USELESS=NO
_base_tools="rustc cargo cargo.bin rust-gdb rust-gdbgui rust-lldb cargo-clippy cargo-miri clippy-driver miri rustdoc"
_cargo_tools="cargo-fmt cargo-llvm-ir fd rg cargo-add evcxr" # NOTE: some crates (like ripgrep or fd-find here), have different name of crate and different utility name
DEF_EXPORTS="${_base_tools} ${_cargo_crates} ${_cargo_tools}"
DEF_CONFLICTS_WITH="Rust"

# NOTE: rustdoc has issues on hardened systems, so disabling mprotect for it:
DEF_NO_MPROTECT=YES
DEF_APPLY_LOWER_SECURITY_ON="rustdoc"

patch_prefix_and_install_x86_64 () {
    ${SED_BIN} -i '' -e "s|/bin/bash|/bin/sh|; s|/usr/local|${PREFIX}|g" install.sh
    note "Installing Rust v${DEF_VERSION}"
    try "./install.sh >> ${LOG}-${DEF_NAME} 2>> ${LOG}-${DEF_NAME}" \
        || exit 6
}

patch_prefix_and_install_arm64 () {
    fetch "${DEF_SOURCE_PATH}" || exit 8
    _tarball="${DEF_SOURCE_PATH##*/}"
    ${TAR_BIN} xf "${_tarball}"
    ${CP_BIN} -R usr/local/ "${PREFIX}"
    ${RM_BIN} -rf "./usr"
    ${RM_BIN} -f "${_tarball}" "+MANIFEST" "+COMPACT_MANIFEST"
}

install_wasm_compiler () {
    _wasm_target="wasm32-unknown-unknown"
    _wasm_name="${DEF_NAME}-std-${DEF_VERSION}-${_wasm_target}"
    _wasm_archive="${_wasm_name}.tar.gz"
    fetch "${MAIN_SOURCE_REPOSITORY}${_wasm_archive}" || fetch "https://static.rust-lang.org/dist/${_wasm_archive}" || exit 7
    ${TAR_BIN} xf "${_wasm_archive}"
    ${CP_BIN} -r \
        "${_wasm_name}/rust-std-${_wasm_target}/lib/rustlib/${_wasm_target}" \
        "${PREFIX}/lib/rustlib/"

    ${RM_BIN} -rf "${_wasm_name}"
    ${RM_BIN} -f "${_wasm_archive}"
}



DEF_AFTER_MAKE_METHOD="create_cargo_bin_wrapper; install_utils"
create_cargo_bin_wrapper () {
    try "${MV_BIN} -f \"${PREFIX}/bin/cargo\" \"${PREFIX}/bin/cargo.bin\"" \
        && printf "#!/usr/bin/env sh \n\
#\n\
# Cargo - Rust Package Manager.\n\
# This is a wrapper for: ${PREFIX}/exports/${DEF_NAME}.bin - that lacks RPATH data in ELF header \n\
# Author: @dmilith \n\
# \n\
CC=cc \\
CPP=cpp \\
CXX=c++ \\
CFLAGS=\"${DEF_COMPILER_FLAGS}\" \\
CXXFLAGS=\"${DEF_COMPILER_FLAGS}\" \\
LDFLAGS=\"${DEF_LINKER_FLAGS}\" \\
RUST_BACKTRACE=\"\${RUST_BACKTRACE:-1}\" \\
RUSTFLAGS=\"\${RUSTFLAGS:-\"${DEFAULT_RUSTFLAGS}\"}\" \\
CARGO_BUILD_JOBS=\"\${CARGO_BUILD_JOBS:-\"${CPUS}\"}\" \\
CARGO_INSTALL_ROOT=\"\${CARGO_INSTALL_ROOT:-\"${SERVICE_DIR}\"}\" \\
${PREFIX}/bin/cargo.bin \${@} \n" > "${PREFIX}/bin/cargo"
    try "${CHMOD_BIN} -v 755 \"${PREFIX}/bin/cargo\""
}

install_utils () {
    note "Installing cargo utilities: $(distn "${_cargo_crates}")"
    for _util in $(to_iter "${_cargo_crates}"); do
        try "CC=cc CXX=c++ LD=ld.lld PATH=${SERVICE_DIR}/bin:${PREFIX}/bin:/bin:/usr/bin:/Services/Sofin/exports cargo install --locked --force ${_util} >> ${LOG}-${DEF_NAME} 2>> ${LOG}-${DEF_NAME}" \
                || exit 7
    done
}
