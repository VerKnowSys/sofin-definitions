DEF_FULL_NAME="WeeChat, the extensible chat client"
DEF_STANDALONE=YES
DEF_NAME="weechat"
DEF_VERSION="4.3.0"
DEF_SHA="f0a3c6bef972b0de7fe26120bcd3322e6179f968"
DEF_SOURCE_PATH="${MAIN_SOURCE_REPOSITORY}${DEF_NAME}-${DEF_VERSION}.tar.xz"
DEF_ORIGIN="https://weechat.org/files/src/${DEF_NAME}-${DEF_VERSION}.tar.xz" # https://github.com/weechat/weechat/releases
DEF_CONFIGURE_METHOD="cmake"
DEF_EXPORTS="weechat weechat-curses"
DEF_USELESS="lib/*.{a,la,sh} lib/cmake include share/{aclocal,gettext,gettext-0.20.2,gtk-doc}"
DEF_USEFUL="bin/pip* bin/python* bin/perl* bin/cpan*"
DEF_LINKER_FLAGS="-lcurl -lintl"

DEF_CONFIGURE_ARGS="-DENABLE_PHP=OFF -DENABLE_TCL=OFF -DENABLE_RELAY=OFF -DENABLE_XFER=OFF -DENABLE_JAVASCRIPT=OFF -DENABLE_HEADLESS=OFF -DENABLE_NLS=OFF -DCA_FILE=${SERVICE_DIR}/etc/ssl/cert.pem -DENABLE_PERL=ON -DENABLE_NCURSES=ON -DENABLE_GNUTLS=ON -DENABLE_PYTHON=ON -DENABLE_LUA=ON -DENABLE_SPELL=ON -DENABLE_GUILE=OFF"
case "${SYSTEM_NAME}" in
    Darwin)
        DEF_REQUIREMENTS="@curl-lib lua51 @libgcrypt @gnutls libuuid cjson"
        DEF_CONFIGURE_ARGS="${DEF_CONFIGURE_ARGS} -DENABLE_RUBY=ON"
        ;;

    *)
        DEF_REQUIREMENTS="@zstd lua51 perl aspell-lib libuuid @python312 @curl-openssl @libgcrypt @gnutls cjson" # olm
        DEF_AFTER_MAKE_METHOD="install_dictionaries; install_additional_requirements; remove_services_bin"
        DEF_CONFIGURE_ARGS="${DEF_CONFIGURE_ARGS} -DENABLE_RUBY=OFF"
        install_additional_requirements () {
            # Install wee_slack.py requirements:
            run "${PREFIX}/bin/pip3 install --upgrade pip"
            run "${PREFIX}/bin/pip3 install pync websocket-client"

            # Install multiline.pl requirements:
            run "printf '%s\n' 'yes' | ${SERVICE_DIR}/bin/cpan Pod::Select"

            # the "cargo" from rust-basic is a wrapper, so we have to undo this here:
            # if [ -x "${PREFIX}/bin/cargo.bin" ]; then
            #     run "mv ${PREFIX}/bin/cargo.bin ${PREFIX}/bin/cargo"
            # fi

            # install weechat-matrix requirements:
            # run "${PREFIX}/bin/pip3 install logbook"
            # run "${PREFIX}/bin/pip3 install atomicwrites"
            # run "${PREFIX}/bin/pip3 install pyOpenSSL"
            # run "${PREFIX}/bin/pip3 install webcolors"
            # run "${PREFIX}/bin/pip3 install attrs"
            # run "${PREFIX}/bin/pip3 install pygments"
            # run "${PREFIX}/bin/pip3 install aiohttp"
            # run "${PREFIX}/bin/pip3 install python-magic"
            # run "${PREFIX}/bin/pip3 install requests"
            # run "${PREFIX}/bin/pip3 install cryptography"
            # run "${PREFIX}/bin/pip3 install matrix-nio"
        }

        install_dictionaries () {
            _pl_dict_root="aspell6-pl-6.0_20210731-0"
            _pl_dict="sjp-${_pl_dict_root}.tar.bz2"
            run "fetch ${MAIN_SOURCE_REPOSITORY}${_pl_dict}"
            run "tar xf ${_pl_dict}"
            run "cd ${_pl_dict_root} && ./configure && make && make install"

            _en_dict_root="aspell6-en-2020.12.07-0"
            _en_dict="${_en_dict_root}.tar.bz2"
            run "fetch ${MAIN_SOURCE_REPOSITORY}${_en_dict}"
            run "tar xf ${_en_dict}"
            run "cd ${_en_dict_root} && ./configure && make && make install"
        }

        remove_services_bin () {
            try "${RM_BIN} -rf ${SERVICE_DIR}/bin"
        }
        ;;
esac

DEF_AFTER_INSTALL_METHOD="strip_libexec"
strip_libexec () {
    try "${STRIP_BIN} ${PREFIX}/lib/weechat/plugins/*.so"
    return 0
}

case "${SYSTEM_NAME}-${SYSTEM_VERSION}" in
    FreeBSD-11*)
        unset DEF_USE_LTO
        ;;
esac

DEF_TEST_METHOD="weechat --version | ${GREP_BIN} -F '${DEF_VERSION}'"
